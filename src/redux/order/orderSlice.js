import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { message } from "antd";

const initialState = {
  carts: [],
};

export const orderSlice = createSlice({
  name: "order",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doAddBookAction: (state, action) => {
      let carts = state.carts;
      const item = action.payload;

      let isExistIndex = carts.findIndex((c) => c._id === item._id);

      if (isExistIndex > -1) {
        carts[isExistIndex].buyQuantity += item.buyQuantity;
        carts[isExistIndex].detail.buyQuantity += item.buyQuantity;
        if (carts[isExistIndex].buyQuantity > item.detail.quantity) {
          carts[isExistIndex].buyQuantity = item.detail.quantity;
          carts[isExistIndex].deltai.buyQuantity = item.detail.quantity;
        }
      } else {
        carts.push({
          buyQuantity: item.buyQuantity,
          _id: item._id,
          detail: Object.assign(item.detail, { buyQuantity: item.buyQuantity }),
        });
        state.carts = carts;
        message.success("Sản phẩm đã được thêm vào giỏ hàng.");
      }
    },
    doUpdateBookAction: (state, action) => {
      let carts = state.carts;
      const item = action.payload;

      let isExistIndex = carts.findIndex((c) => c._id === item._id);

      if (isExistIndex > -1) {
        carts[isExistIndex].buyQuantity = item.buyQuantity;
        carts[isExistIndex].detail.buyQuantity = item.buyQuantity;

        if (carts[isExistIndex].buyQuantity > item.detail.quantity) {
          carts[isExistIndex].buyQuantity = item.detail.quantity;
          carts[isExistIndex].deltai.buyQuantity = item.detail.quantity;
        }
      } else {
        carts.push({
          buyQuantity: item.buyQuantity,
          _id: item._id,
          //detail: Object.assign(item.detail, { buyQuantity: item.buyQuantity }),
          detail: item.detail,
        });
        state.carts = carts;
        message.success("Cập nhật thành công giỏ hàng.");
      }
    },
    doDeleteItemCartAction: (state, action) => {
      state.carts = state.carts.filter((c) => c._id !== action.payload._id);
    },
    doPlaceOrderAction: (state, action) => {
      state.carts = [];
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {
  doUpdateBookAction,
  doAddBookAction,
  doDeleteItemCartAction,
  doPlaceOrderAction,
} = orderSlice.actions;

export default orderSlice.reducer;
